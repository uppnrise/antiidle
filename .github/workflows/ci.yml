name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  test-and-quality:
    name: Test and Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK and Gradle
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle Wrapper
      run: |
        # Create the gradle/wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        # Download the gradle-wrapper.jar file
        curl -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/master/gradle/wrapper/gradle-wrapper.jar
        # Create or update the gradle-wrapper.properties file
        echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
        echo "networkTimeout=10000" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        # Make the gradlew script executable
        chmod +x gradlew

    - name: Run tests
      run: ./gradlew test

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Tests
        path: build/test-results/test/*.xml
        reporter: java-junit

    - name: Run code quality checks
      run: ./gradlew spotbugsMain checkstyleMain jacocoTestReport

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/reports/jacoco/test/jacocoTestReport.xml
        fail_ci_if_error: false

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-results
        path: |
          build/test-results/
          build/reports/

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [test-and-quality]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK and Gradle
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        cache: gradle

    - name: Setup Gradle Wrapper
      run: |
        # Create the gradle/wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        # Download the gradle-wrapper.jar file
        curl -o gradle/wrapper/gradle-wrapper.jar https://raw.githubusercontent.com/gradle/gradle/master/gradle/wrapper/gradle-wrapper.jar
        # Create or update the gradle-wrapper.properties file
        echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
        echo "networkTimeout=10000" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        # Make the gradlew script executable
        chmod +x gradlew

    - name: Build application and packages
      run: ./gradlew build distZip distTar

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/libs/*.jar
          build/distributions/*

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        path: artifacts

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/build/libs/*.jar
          artifacts/build/distributions/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
